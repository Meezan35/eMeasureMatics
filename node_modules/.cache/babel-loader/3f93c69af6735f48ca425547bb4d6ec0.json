{"ast":null,"code":"var _jsxFileName = \"/Users/meezan.shaikh/Desktop/eMeasureMatics/parcel/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react/cjs/react.development\";\nimport ActionButtons from \"./Components/ActionButtons\";\nimport EditParcel from \"./Components/EditParcel\";\nimport GroupHeader from \"./Components/GroupHeader\";\nimport Parcel from \"./Components/Parcel\";\nimport { data } from \"./constant/data\";\nimport { guidGenerator } from \"./util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = {\n  group: \"\",\n  id: 0,\n  index: 0,\n  name: \"\",\n  sequence: 0\n};\n\nfunction App() {\n  _s();\n\n  const [parcel, setParcel] = useState([...data]);\n  const [edit, setEdit] = useState({ ...initialData\n  });\n  useEffect(() => {\n    setParcel(parcel);\n  }, [parcel]);\n\n  const replaceParcel = replacedata => {\n    const selectedIndex = replacedata.index;\n    delete replacedata.index;\n    setParcel(parcel.map((m, index) => {\n      if (index === selectedIndex) {\n        return replacedata;\n      } else {\n        return m;\n      }\n    }));\n    setEdit({ ...initialData\n    });\n  };\n\n  const updateParcel = (type, selectedData) => {\n    const selectedIndex = selectedData.index;\n    delete selectedData.index;\n    selectedData[\"id\"] = guidGenerator();\n    selectedData[\"sequence\"] = type === \"add\" ? selectedData.sequence + 1 : selectedData.sequence - 1;\n    parcel.splice(type === \"add\" ? selectedIndex + 1 : selectedIndex, 0, selectedData);\n    let updatedArray = type === \"add\" ? parcel.map((m, index) => {\n      if (selectedIndex + 2 <= index) {\n        const sequenceUpdated = m.sequence + 1;\n        const {\n          sequence,\n          ...rest\n        } = m;\n        return {\n          sequence: sequenceUpdated,\n          ...rest\n        };\n      } else {\n        return m;\n      }\n    }) : parcel.map((m, index) => {\n      if (selectedIndex - 1 >= index) {\n        const sequenceUpdated = m.sequence - 1;\n        const {\n          sequence,\n          ...rest\n        } = m;\n        return {\n          sequence: sequenceUpdated,\n          ...rest\n        };\n      } else {\n        return m;\n      }\n    });\n    console.log(updatedArray);\n    setParcel([...updatedArray]);\n    setEdit({ ...initialData\n    });\n  };\n\n  const listenAction = (type, selectedData) => {\n    switch (true) {\n      case type === \"refresh\":\n        setEdit({ ...initialData\n        });\n        setParcel([...data]);\n        break;\n\n      case type === \"showFinal\":\n        console.log(parcel);\n        break;\n\n      case type === \"replace\":\n        replaceParcel(selectedData);\n        break;\n\n      case type === \"addAfter\":\n        updateParcel(\"add\", selectedData);\n        break;\n\n      case type === \"addBefore\":\n        updateParcel(\"minus\", selectedData);\n        break;\n\n      case type === \"delete\":\n        setParcel(parcel.filter(f => f.sequence !== selectedData.sequence));\n        break;\n\n      default:\n        return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(GroupHeader, {\n      data: parcel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Parcel, {\n      sendSelectEdit: (c, index) => setEdit(c),\n      editData: edit,\n      data: parcel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditParcel, {\n      btnAction: (type, data) => listenAction(type, data),\n      editData: edit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"IANd6ZwEP6aVkwRHk6f5USKQir8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/meezan.shaikh/Desktop/eMeasureMatics/parcel/src/App.js"],"names":["React","useState","useEffect","ActionButtons","EditParcel","GroupHeader","Parcel","data","guidGenerator","initialData","group","id","index","name","sequence","App","parcel","setParcel","edit","setEdit","replaceParcel","replacedata","selectedIndex","map","m","updateParcel","type","selectedData","splice","updatedArray","sequenceUpdated","rest","console","log","listenAction","filter","f","c"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useEffect } from \"react/cjs/react.development\";\n\nimport ActionButtons from \"./Components/ActionButtons\";\nimport EditParcel from \"./Components/EditParcel\";\nimport GroupHeader from \"./Components/GroupHeader\";\nimport Parcel from \"./Components/Parcel\";\n\nimport { data } from \"./constant/data\";\nimport { guidGenerator } from \"./util\";\n\nconst initialData = {\n  group: \"\",\n  id: 0,\n  index: 0,\n  name: \"\",\n  sequence: 0,\n};\n\nfunction App() {\n  const [parcel, setParcel] = useState([...data]);\n  const [edit, setEdit] = useState({ ...initialData });\n\n  useEffect(() => {\n    setParcel(parcel);\n  }, [parcel]);\n\n  const replaceParcel = (replacedata) => {\n    const selectedIndex = replacedata.index;\n    delete replacedata.index;\n    setParcel(\n      parcel.map((m, index) => {\n        if (index === selectedIndex) {\n          return replacedata;\n        } else {\n          return m;\n        }\n      })\n    );\n    setEdit({ ...initialData });\n  };\n\n  const updateParcel = (type, selectedData) => {\n    const selectedIndex = selectedData.index;\n    delete selectedData.index;\n    selectedData[\"id\"] = guidGenerator();\n    selectedData[\"sequence\"] =\n      type === \"add\" ? selectedData.sequence + 1 : selectedData.sequence - 1;\n    parcel.splice(\n      type === \"add\" ? selectedIndex + 1 : selectedIndex,\n      0,\n      selectedData\n    );\n    let updatedArray =\n      type === \"add\"\n        ? parcel.map((m, index) => {\n            if (selectedIndex + 2 <= index) {\n              const sequenceUpdated = m.sequence + 1;\n              const { sequence, ...rest } = m;\n              return { sequence: sequenceUpdated, ...rest };\n            } else {\n              return m;\n            }\n          })\n        : parcel.map((m, index) => {\n            if (selectedIndex - 1 >= index) {\n              const sequenceUpdated = m.sequence - 1;\n              const { sequence, ...rest } = m;\n              return { sequence: sequenceUpdated, ...rest };\n            } else {\n              return m;\n            }\n          });\n    console.log(updatedArray);\n\n    setParcel([...updatedArray]);\n    setEdit({ ...initialData });\n  };\n\n  const listenAction = (type, selectedData) => {\n    switch (true) {\n      case type === \"refresh\":\n        setEdit({ ...initialData });\n        setParcel([...data]);\n        break;\n      case type === \"showFinal\":\n        console.log(parcel);\n        break;\n      case type === \"replace\":\n        replaceParcel(selectedData);\n        break;\n      case type === \"addAfter\":\n        updateParcel(\"add\", selectedData);\n        break;\n      case type === \"addBefore\":\n        updateParcel(\"minus\", selectedData);\n        break;\n      case type === \"delete\":\n        setParcel(parcel.filter((f) => f.sequence !== selectedData.sequence));\n        break;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <GroupHeader data={parcel} />\n      <Parcel\n        sendSelectEdit={(c, index) => setEdit(c)}\n        editData={edit}\n        data={parcel}\n      />\n      <EditParcel\n        btnAction={(type, data) => listenAction(type, data)}\n        editData={edit}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}